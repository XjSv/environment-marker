{"version":3,"sources":["options.js"],"names":["errorDuplicateMarker","browser","i18n","getMessage","errorLabelEmpty","errorUrlEmpty","noticeSuccessExport","noticeSuccessImport","errorNoRibbonsToExport","errorChooseFile","inputChooseFile","buttonExport","buttonImport","exportFile","onError","error","console","log","showMessage","textMsg","errorFlag","messageClass","$","length","remove","append","saveSettings","urlIn","colorIn","labelIn","positionIn","sizeIn","settingUrl","settingColor","settingLabel","settingPosition","settingSize","storage","local","get","then","result","Object","keys","storeSetting","set","[object Object]","makeJsonExportFile","text","data","Blob","type","window","URL","revokeObjectURL","createObjectURL","exportConfig","results","settingsUrls","configurations","push","url","color","label","position","size","configurations_json","JSON","stringify","link","document","createElement","setAttribute","href","body","appendChild","requestAnimationFrame","event","MouseEvent","dispatchEvent","removeChild","importConfig","importFileInput","getElementById","importFile","files","reader","FileReader","addEventListener","import_config_obj","parse","forEach","arrayItem","html","value","readAsText","ready","click","change","target","name"],"mappings":"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","file":"options.min.js","sourcesContent":["let errorDuplicateMarker = browser.i18n.getMessage(\"errorDuplicateMarker\");\r\nlet errorLabelEmpty = browser.i18n.getMessage(\"errorLabelEmpty\");\r\nlet errorUrlEmpty = browser.i18n.getMessage(\"errorUrlEmpty\");\r\nlet noticeSuccessExport = browser.i18n.getMessage(\"noticeSuccessExport\");\r\nlet noticeSuccessImport = browser.i18n.getMessage(\"noticeSuccessImport\");\r\nlet errorNoRibbonsToExport = browser.i18n.getMessage(\"errorNoRibbonsToExport\");\r\nlet errorChooseFile = browser.i18n.getMessage(\"errorChooseFile\");\r\nlet inputChooseFile = browser.i18n.getMessage(\"inputChooseFile\");\r\nlet buttonExport = browser.i18n.getMessage(\"buttonExport\");\r\nlet buttonImport = browser.i18n.getMessage(\"buttonImport\");\r\nlet exportFile = null;\r\n\r\nfunction onError(error) {\r\n    console.log(error);\r\n}\r\n\r\n/* Show error message */\r\nfunction showMessage(textMsg, errorFlag = false) {\r\n    let messageClass = errorFlag ? 'alert-danger' : 'alert-success';\r\n    if ($('.outer-wrapper .message-container .alert').length) {\r\n        $('.outer-wrapper .message-container .alert').remove();\r\n        $('.outer-wrapper .message-container').append('<div class=\"alert ' + messageClass + ' col-12\">' + textMsg + '</div>');\r\n    } else {\r\n        $('.outer-wrapper .message-container').append('<div class=\"alert ' + messageClass + ' col-12\">' + textMsg + '</div>');\r\n    }\r\n}\r\n\r\n/* Add a setting to storage */\r\nfunction saveSettings(urlIn, colorIn, labelIn, positionIn, sizeIn) {\r\n    let settingUrl = urlIn,\r\n        settingColor = colorIn,\r\n        settingLabel = labelIn,\r\n        settingPosition = positionIn,\r\n        settingSize = sizeIn;\r\n\r\n    if (settingUrl !== '' && settingColor !== '' && settingLabel !== '') {\r\n        browser.storage.local.get(settingUrl).then((result) => {\r\n            let objTest = Object.keys(result);\r\n\r\n            if (objTest.length < 1) {\r\n                storeSetting(settingUrl, settingColor, settingLabel, settingPosition, settingSize);\r\n            } else {\r\n                // Duplicate marker error message\r\n                showMessage(errorDuplicateMarker, true);\r\n            }\r\n        }, onError);\r\n    } else {\r\n        // Empty input error message\r\n        settingLabel === '' ? showMessage(errorLabelEmpty, true) : showMessage(errorUrlEmpty, true);\r\n    }\r\n}\r\n\r\n/* Store a new setting in local storage */\r\nfunction storeSetting(settingUrl, settingColor, settingLabel, settingPosition, settingSize) {\r\n    browser.storage.local.set({ [settingUrl] : [settingColor, settingLabel, settingPosition, settingSize] }).then(() => {\r\n        // Success\r\n    }, onError);\r\n}\r\n\r\n/* Make a URL Object from json text */\r\nfunction makeJsonExportFile(text) {\r\n    let data = new Blob([text], { type: 'application/json' });\r\n\r\n    // If we are replacing a previously generated file we need to\r\n    // manually revoke the object URL to avoid memory leaks.\r\n    if (exportFile !== null) {\r\n        window.URL.revokeObjectURL(exportFile);\r\n    }\r\n\r\n    exportFile = window.URL.createObjectURL(data);\r\n    return exportFile;\r\n}\r\n\r\n/* Get all configurations from the storage and output a json file */\r\nfunction exportConfig() {\r\n    browser.storage.local.get(null).then((results) => {\r\n        let settingsUrls = Object.keys(results),\r\n            configurations = [];\r\n\r\n        if (settingsUrls.length > 0) {\r\n            for (let settingUrl of settingsUrls) {\r\n                configurations.push({\r\n                    \"url\" : settingUrl,\r\n                    \"color\" : results[settingUrl][0],\r\n                    \"label\" : results[settingUrl][1],\r\n                    \"position\" : results[settingUrl][2],\r\n                    \"size\" : results[settingUrl][3]\r\n                });\r\n            }\r\n\r\n            let configurations_json = JSON.stringify(configurations);\r\n            let link = document.createElement('a');\r\n            link.setAttribute('download', 'ribbons.json');\r\n            link.href = makeJsonExportFile(configurations_json);\r\n            document.body.appendChild(link);\r\n\r\n            // wait for the link to be added to the document\r\n            window.requestAnimationFrame(function () {\r\n                let event = new MouseEvent('click');\r\n                link.dispatchEvent(event);\r\n                document.body.removeChild(link);\r\n\r\n                showMessage(noticeSuccessExport);\r\n            });\r\n        } else {\r\n            showMessage(errorNoRibbonsToExport, true);\r\n        }\r\n    }, onError);\r\n}\r\n\r\n/* Read import file and load all settings into the stoage */\r\nfunction importConfig() {\r\n    let importFileInput = document.getElementById(\"importFile\"),\r\n        importFile = importFileInput.files[0];\r\n\r\n    if (importFile) {\r\n        const reader = new FileReader();\r\n\r\n        // This event listener will happen when the reader has read the file\r\n        reader.addEventListener('load', function() {\r\n            let import_config_obj = JSON.parse(reader.result); // Parse the result into an object\r\n\r\n            if (import_config_obj.length > 0) {\r\n                import_config_obj.forEach(function(arrayItem) {\r\n                    saveSettings(arrayItem.url, arrayItem.color, arrayItem.label, arrayItem.position, arrayItem.size);\r\n                });\r\n\r\n                showMessage(noticeSuccessImport);\r\n            }\r\n\r\n            $('.import-file-label').html(inputChooseFile);\r\n            importFileInput.value = '';\r\n        });\r\n\r\n        reader.readAsText(importFile); // Read the uploaded file\r\n    } else {\r\n        showMessage(errorChooseFile);\r\n    }\r\n}\r\n\r\n$(document).ready(() => {\r\n    $('.export').click(() => {\r\n        exportConfig();\r\n    });\r\n\r\n    $('.import').click(() => {\r\n        importConfig();\r\n    });\r\n\r\n    $('#importFile').change((event) => {\r\n        if (event.target.files.length) {\r\n            $('.import-file-label').html(event.target.files[0].name);\r\n        }\r\n    });\r\n\r\n    $('.export').html('<i class=\"fas fa-download fa-lg\"></i> ' + buttonExport);\r\n    $('.import').html('<i class=\"fas fa-upload fa-lg\"></i> ' + buttonImport);\r\n    $('.import-file-label').html(inputChooseFile);\r\n});\r\n"]}