{"version":3,"sources":["options.js"],"names":["errorDuplicateMarker","browser","i18n","getMessage","errorLabelEmpty","errorUrlEmpty","noticeSuccessExport","noticeSuccessImport","errorNoRibbonsToExport","errorChooseFile","inputChooseFile","buttonExport","buttonImport","importWarning","errorImportLabelEmpty","errorImportUrlEmpty","errorImportColorEmpty","inputEnableRegExp","noticeSettingSaved","ariaLabelAlertClose","optionsSettingsSection","optionsExportImportSection","inputFontLabel","inputFontHelpText","inputRegExpHelpText","errorFileEmptyOrFormat","exportFile","languageCode","getUILanguage","languageCodeTwoChar","split","markersKey","searchModeKey","fontKey","exportFileName","onError","error","console","log","showMessage","textMsg","errorFlag","messageClass","$","length","alert","append","window","setTimeout","makeJsonExportFile","text","data","Blob","type","URL","revokeObjectURL","createObjectURL","exportConfig","storage","local","get","then","storedResults","storedArray","configurations","storedObject","push","url","settingUrl","color","settingColor","label","settingLabel","position","settingPosition","size","settingSize","configurations_json","JSON","stringify","link","document","createElement","setAttribute","href","body","appendChild","requestAnimationFrame","event","MouseEvent","dispatchEvent","removeChild","importConfig","importFileInput","getElementById","importFile","files","reader","FileReader","addEventListener","importConfigObjects","parse","result","hasOwnProperty","errorMessages","importConfigObject","storeObject","html","value","set","[object Object]","readAsText","ready","attr","exportButton","importButton","click","change","target","name","storedSearchMode","storedSearchModeBool","prop","enableRegexpValue","is","fontpicker","lang","variants","lazyLoad","showClear","nrRecents","localFonts","Arial","category","Georgia","Times New Roman","Verdana","localFontsUrl","onSelect","fontObject","fontStoreValue","fontType","fontSpec","storedFont","fontString","fontTmp","font","variant","val","trigger"],"mappings":"AAAA,IAAIA,qBAAuBC,QAAQC,KAAKC,WAAW,wBAC/CC,gBAAkBH,QAAQC,KAAKC,WAAW,mBAC1CE,cAAgBJ,QAAQC,KAAKC,WAAW,iBACxCG,oBAAsBL,QAAQC,KAAKC,WAAW,uBAC9CI,oBAAsBN,QAAQC,KAAKC,WAAW,uBAC9CK,uBAAyBP,QAAQC,KAAKC,WAAW,0BACjDM,gBAAkBR,QAAQC,KAAKC,WAAW,mBAC1CO,gBAAkBT,QAAQC,KAAKC,WAAW,mBAC1CQ,aAAeV,QAAQC,KAAKC,WAAW,gBACvCS,aAAeX,QAAQC,KAAKC,WAAW,gBACvCU,cAAgBZ,QAAQC,KAAKC,WAAW,iBACxCW,sBAAwBb,QAAQC,KAAKC,WAAW,yBAChDY,oBAAsBd,QAAQC,KAAKC,WAAW,uBAC9Ca,sBAAwBf,QAAQC,KAAKC,WAAW,yBAChDc,kBAAoBhB,QAAQC,KAAKC,WAAW,qBAC5Ce,mBAAqBjB,QAAQC,KAAKC,WAAW,sBAC7CgB,oBAAsBlB,QAAQC,KAAKC,WAAW,uBAC9CiB,uBAAyBnB,QAAQC,KAAKC,WAAW,0BACjDkB,2BAA6BpB,QAAQC,KAAKC,WAAW,8BACrDmB,eAAiBrB,QAAQC,KAAKC,WAAW,kBACzCoB,kBAAoBtB,QAAQC,KAAKC,WAAW,qBAC5CqB,oBAAsBvB,QAAQC,KAAKC,WAAW,uBAC9CsB,uBAAyBxB,QAAQC,KAAKC,WAAW,0BACjDuB,WAAa,KAEbC,aAAe1B,QAAQC,KAAK0B,gBAC5BC,oBAAsBF,aAAaG,MAAM,KAAK,GAClD,MAAMC,WAAa,iBACbC,cAAgB,qBAChBC,QAAU,cACVC,eAAiB,eAEvB,SAASC,QAAQC,GACfC,QAAQC,IAAIF,GAId,SAASG,YAAYC,EAASC,GAAY,GACxC,IAAIC,EAAeD,EAAY,eAAiB,gBAC5CE,EAAE,sBAAsBC,QAC1BD,EAAE,sBAAsBE,MAAM,SAGhCF,EAAE,qCAAqCG,OACrC,qBAAuBJ,EAAe,8CAAgDF,EACtF,wEAA0ErB,oBAD1E,4DAKF4B,OAAOC,YAAW,WAChBL,EAAE,sBAAsBE,MAAM,WAC7B,KAIL,SAASI,mBAAmBC,GAC1B,IAAIC,EAAO,IAAIC,KAAK,CAACF,GAAO,CAAEG,KAAM,qBASpC,OALmB,OAAf3B,YACFqB,OAAOO,IAAIC,gBAAgB7B,YAG7BA,WAAaqB,OAAOO,IAAIE,gBAAgBL,GACjCzB,WAIT,SAAS+B,eACPxD,QAAQyD,QAAQC,MAAMC,IAAI7B,YAAY8B,KAAMC,IAC1C,IAAIC,EAAcD,EAAc/B,aAAe,GAC3CiC,EAAiB,GAErB,GAAID,EAAYnB,OAAS,EAAG,CAC1B,IAAK,IAAIqB,KAAgBF,EACvBC,EAAeE,KAAK,CAClBC,IAAQF,EAAaG,WACrBC,MAAUJ,EAAaK,aACvBC,MAAUN,EAAaO,aACvBC,SAAaR,EAAaS,gBAC1BC,KAASV,EAAaW,cAI1B,IAAIC,EAAsBC,KAAKC,UAAUf,GACrCgB,EAAOC,SAASC,cAAc,KAClCF,EAAKG,aAAa,WAzDD,gBA0DjBH,EAAKI,KAAOnC,mBAAmB4B,GAC/BI,SAASI,KAAKC,YAAYN,GAG1BjC,OAAOwC,uBAAsB,WAC3B,IAAIC,EAAQ,IAAIC,WAAW,SAC3BT,EAAKU,cAAcF,GACnBP,SAASI,KAAKM,YAAYX,GAE1BzC,YAAYjC,6BAGdiC,YAAY/B,wBAAwB,IAErC2B,SAIL,SAASyD,eACP,IAAIC,EAAkBZ,SAASa,eAAe,cAC1CC,EAAaF,EAAgBG,MAAM,GAIvC,GAFA3D,QAAQC,IAAIsD,cAERG,EAAY,CACd,MAAME,EAAS,IAAIC,WAGnBD,EAAOE,iBAAiB,QAAQ,WAC9B,IAAIC,EAAsBtB,KAAKuB,MAAMJ,EAAOK,QAE5C,GAAIF,EAAoBxD,OAAS,GAAKwD,EAAoBG,eAAe,OAAQ,CAC/E,IAAIxC,EAAc,GACdyC,EAAgB,GAEpB,IAAK,IAAIC,KAAsBL,EAC7B,GAA+B,KAA3BK,EAAmBtC,KAA2C,KAA7BsC,EAAmBpC,OAA6C,KAA7BoC,EAAmBlC,MAAc,CACvG,IAAImC,EAAc,CAChBtC,WAAYqC,EAAmBtC,IAC/BG,aAAcmC,EAAmBpC,MACjCG,aAAciC,EAAmBlC,MACjCG,gBAAiB+B,EAAmBhC,SACpCG,YAAa6B,EAAmB9B,MAElCZ,EAAYG,KAAKwC,OAGc,KAA3BD,EAAmBtC,MACrBqC,GAAiB,OAASzF,oBAAsB,SAEjB,KAA7B0F,EAAmBlC,QACrBiC,GAAiB,OAAS1F,sBAAwB,SAEnB,KAA7B2F,EAAmBpC,QACrBmC,GAAiB,OAASxF,sBAAwB,SAKxD2B,EAAE,sBAAsBgE,KAAKjG,iBAC7BmF,EAAgBe,MAAQ,GAEF,KAAlBJ,EACFjE,YAAY,OAASiE,EAAgB,SAAS,GAE9CvG,QAAQyD,QAAQC,MAAMkD,IAAI,CAAEC,CAAC/E,YAAcgC,IAAeF,KAAK,KAC7DtB,YAAYhC,sBACX4B,cAGLI,YAAYd,wBAAwB,MAIxCwE,EAAOc,WAAWhB,QAElBxD,YAAY9B,iBAAiB,GAIjCkC,EAAEsC,UAAU+B,MAAM,KAChBrE,EAAE,QAAQsE,KAAK,OAAQtF,cAEvB,IAAIuF,EAAevE,EAAE,WACjBwE,EAAexE,EAAE,WAErBuE,EAAaE,MAAM,KACjB3D,iBAGF0D,EAAaC,MAAM,KACjBxB,iBAGFjD,EAAE,eAAe0E,OAAQ7B,IACnBA,EAAM8B,OAAOtB,MAAMpD,QACrBD,EAAE,sBAAsBgE,KAAKnB,EAAM8B,OAAOtB,MAAM,GAAGuB,QAIvDtH,QAAQyD,QAAQC,MAAMC,IAAI5B,eAAe6B,KAAM2D,IAC7C,IAAIC,EAAuBD,EAAiBxF,iBAAkB,EAC9DW,EAAE,kBAAkB+E,KAAK,UAAWD,IACnCtF,SAEHQ,EAAE,kBAAkB0E,OAAQ7B,IAC1B,IAAImC,EAAoBhF,EAAE6C,EAAM8B,QAAQM,GAAG,YAC3C3H,QAAQyD,QAAQC,MAAMkD,IAAI,CAAEC,CAAC9E,eAAiB2F,IAAqB9D,KAAK,KACtEtB,YAAYrB,qBACXiB,WAGL+E,EAAaP,KAAK,yCAA2ChG,cAC7DwG,EAAaR,KAAK,uCAAyC/F,cAC3D+B,EAAE,sBAAsBgE,KAAKjG,iBAC7BiC,EAAE,mBAAmBgE,KAAK9F,eAC1B8B,EAAE,wBAAwBgE,KAAK1F,mBAE/B0B,EAAE,2BAA2BgE,KAAK,8BAAgCvF,wBAClEuB,EAAE,gCAAgCgE,KAAK,mCAAqCtF,4BAC5EsB,EAAE,eAAegE,KAAKrF,gBACtBqB,EAAE,2BAA2BgE,KAAKpF,mBAClCoB,EAAE,6BAA6BgE,KAAKnF,qBAEpCmB,EAAE,gBAAgBkF,WAAW,CAC3BC,KAAMjG,oBACNkG,UAAU,EACVC,UAAU,EACVC,WAAW,EACXC,UAAW,EACXC,WAAY,CACVC,MAAS,CACPC,SAAY,aACZN,SAAY,qBAEdO,QAAW,CACTD,SAAY,QACZN,SAAY,qBAEdQ,kBAAmB,CACjBF,SAAY,QACZN,SAAY,qBAEdS,QAAW,CACTH,SAAY,aACZN,SAAY,sBAchBU,cAAe,+BACfC,SAAU,SAASC,GACjB,IAAIC,EAAiBD,EAAWE,SAAW,IAAMF,EAAWG,SAE5D7I,QAAQyD,QAAQC,MAAMkD,IAAI,CAACC,CAAC7E,SAAW2G,IAAiB/E,KAAK,KAC3DtB,YAAYrB,yBAKlBjB,QAAQyD,QAAQC,MAAMC,IAAI3B,SAAS4B,KAAMkF,IACvC,IAAIC,EAAaD,EAAW9G,UAAY,GAExC,GAAI+G,EAAY,CACd,IAAIC,EAAUD,EAAWlH,MAAM,KAC3BoH,EAAOD,EAAQ,GACfE,EAAUF,EAAQ,GAEtBtG,EAAE,gBAAgByG,IAAIF,EAAO,IAAMC,GAASE,QAAQ,aAIxD1G,EAAE,aAAayE,MAAM,KACnBnH,QAAQyD,QAAQC,MAAMkD,IAAI,CAACC,CAAC7E,SAAW,KAAK4B,KAAK,KAC/CtB,YAAYrB","file":"options.min.js","sourcesContent":["let errorDuplicateMarker = browser.i18n.getMessage(\"errorDuplicateMarker\"),\r\n    errorLabelEmpty = browser.i18n.getMessage(\"errorLabelEmpty\"),\r\n    errorUrlEmpty = browser.i18n.getMessage(\"errorUrlEmpty\"),\r\n    noticeSuccessExport = browser.i18n.getMessage(\"noticeSuccessExport\"),\r\n    noticeSuccessImport = browser.i18n.getMessage(\"noticeSuccessImport\"),\r\n    errorNoRibbonsToExport = browser.i18n.getMessage(\"errorNoRibbonsToExport\"),\r\n    errorChooseFile = browser.i18n.getMessage(\"errorChooseFile\"),\r\n    inputChooseFile = browser.i18n.getMessage(\"inputChooseFile\"),\r\n    buttonExport = browser.i18n.getMessage(\"buttonExport\"),\r\n    buttonImport = browser.i18n.getMessage(\"buttonImport\"),\r\n    importWarning = browser.i18n.getMessage(\"importWarning\"),\r\n    errorImportLabelEmpty = browser.i18n.getMessage(\"errorImportLabelEmpty\"),\r\n    errorImportUrlEmpty = browser.i18n.getMessage(\"errorImportUrlEmpty\"),\r\n    errorImportColorEmpty = browser.i18n.getMessage(\"errorImportColorEmpty\"),\r\n    inputEnableRegExp = browser.i18n.getMessage(\"inputEnableRegExp\"),\r\n    noticeSettingSaved = browser.i18n.getMessage(\"noticeSettingSaved\"),\r\n    ariaLabelAlertClose = browser.i18n.getMessage(\"ariaLabelAlertClose\"),\r\n    optionsSettingsSection = browser.i18n.getMessage(\"optionsSettingsSection\"),\r\n    optionsExportImportSection = browser.i18n.getMessage(\"optionsExportImportSection\"),\r\n    inputFontLabel = browser.i18n.getMessage(\"inputFontLabel\"),\r\n    inputFontHelpText = browser.i18n.getMessage(\"inputFontHelpText\"),\r\n    inputRegExpHelpText = browser.i18n.getMessage(\"inputRegExpHelpText\"),\r\n    errorFileEmptyOrFormat = browser.i18n.getMessage(\"errorFileEmptyOrFormat\"),\r\n    exportFile = null;\r\n\r\nlet languageCode = browser.i18n.getUILanguage(),\r\n    languageCodeTwoChar = languageCode.split('-')[0];\r\nconst markersKey = '__em-markers__';\r\nconst searchModeKey = '__em-search-mode__';\r\nconst fontKey = '__em-font__';\r\nconst exportFileName = 'ribbons.json';\r\n\r\nfunction onError(error) {\r\n  console.log(error);\r\n}\r\n\r\n/* Show error or success messages */\r\nfunction showMessage(textMsg, errorFlag = false) {\r\n  let messageClass = errorFlag ? 'alert-danger' : 'alert-success';\r\n  if ($('.alert-dismissible').length) {\r\n    $('.alert-dismissible').alert('close');\r\n  }\r\n\r\n  $('.outer-wrapper .message-container').append(\r\n    '<div class=\"alert ' + messageClass + ' alert-dismissible fade show\" role=\"alert\">' + textMsg +\r\n    '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"' + ariaLabelAlertClose + '\">' +\r\n    '<span aria-hidden=\"true\">&times;</span></button></div>'\r\n  );\r\n\r\n  window.setTimeout(function() {\r\n    $('.alert-dismissible').alert('close');\r\n  }, 3000);\r\n}\r\n\r\n/* Make a URL Object from json text */\r\nfunction makeJsonExportFile(text) {\r\n  let data = new Blob([text], { type: 'application/json' });\r\n\r\n  // If we are replacing a previously generated file we need to\r\n  // manually revoke the object URL to avoid memory leaks.\r\n  if (exportFile !== null) {\r\n    window.URL.revokeObjectURL(exportFile);\r\n  }\r\n\r\n  exportFile = window.URL.createObjectURL(data);\r\n  return exportFile;\r\n}\r\n\r\n/* Get all configurations from the storage and output a json file */\r\nfunction exportConfig() {\r\n  browser.storage.local.get(markersKey).then((storedResults) => {\r\n    let storedArray = storedResults[markersKey] || [],\r\n        configurations = [];\r\n\r\n    if (storedArray.length > 0) {\r\n      for (let storedObject of storedArray) {\r\n        configurations.push({\r\n          \"url\" : storedObject.settingUrl,\r\n          \"color\" : storedObject.settingColor,\r\n          \"label\" : storedObject.settingLabel,\r\n          \"position\" : storedObject.settingPosition,\r\n          \"size\" : storedObject.settingSize\r\n        });\r\n      }\r\n\r\n      let configurations_json = JSON.stringify(configurations);\r\n      let link = document.createElement('a');\r\n      link.setAttribute('download', exportFileName);\r\n      link.href = makeJsonExportFile(configurations_json);\r\n      document.body.appendChild(link);\r\n\r\n      // Wait for the link to be added to the document\r\n      window.requestAnimationFrame(function () {\r\n        let event = new MouseEvent('click');\r\n        link.dispatchEvent(event);\r\n        document.body.removeChild(link);\r\n\r\n        showMessage(noticeSuccessExport);\r\n      });\r\n    } else {\r\n      showMessage(errorNoRibbonsToExport, true);\r\n    }\r\n  }, onError);\r\n}\r\n\r\n/* Read import file and load all settings into the stoage */\r\nfunction importConfig() {\r\n  let importFileInput = document.getElementById('importFile'),\r\n      importFile = importFileInput.files[0];\r\n\r\n  console.log(importConfig);\r\n\r\n  if (importFile) {\r\n    const reader = new FileReader();\r\n\r\n    // This event listener will happen when the reader has read the file\r\n    reader.addEventListener('load', function() {\r\n      let importConfigObjects = JSON.parse(reader.result); // Parse the result into an object\r\n\r\n      if (importConfigObjects.length > 0 && importConfigObjects.hasOwnProperty('url')) {\r\n        let storedArray = [],\r\n            errorMessages = '';\r\n\r\n        for (let importConfigObject of importConfigObjects) {\r\n          if (importConfigObject.url !== '' && importConfigObject.color !== '' && importConfigObject.label !== '') {\r\n            let storeObject = {\r\n              settingUrl: importConfigObject.url,\r\n              settingColor: importConfigObject.color,\r\n              settingLabel: importConfigObject.label,\r\n              settingPosition: importConfigObject.position,\r\n              settingSize: importConfigObject.size\r\n            };\r\n            storedArray.push(storeObject);\r\n          } else {\r\n            // Empty field error messages\r\n            if (importConfigObject.url === '') {\r\n              errorMessages += '<li>' + errorImportUrlEmpty + '</li>';\r\n            }\r\n            if (importConfigObject.label === '') {\r\n              errorMessages += '<li>' + errorImportLabelEmpty + '</li>';\r\n            }\r\n            if (importConfigObject.color === '') {\r\n              errorMessages += '<li>' + errorImportColorEmpty + '</li>';\r\n            }\r\n          }\r\n        }\r\n\r\n        $('.import-file-label').html(inputChooseFile);\r\n        importFileInput.value = '';\r\n\r\n        if (errorMessages !== '') {\r\n          showMessage('<ul>' + errorMessages + '</ul>', true);\r\n        } else {\r\n          browser.storage.local.set({ [markersKey] : storedArray }).then(() => {\r\n            showMessage(noticeSuccessImport);\r\n          }, onError);\r\n        }\r\n      } else {\r\n        showMessage(errorFileEmptyOrFormat, true);\r\n      }\r\n    });\r\n\r\n    reader.readAsText(importFile); // Read the uploaded file\r\n  } else {\r\n    showMessage(errorChooseFile, true);\r\n  }\r\n}\r\n\r\n$(document).ready(() => {\r\n  $('html').attr('lang', languageCode);\r\n\r\n  let exportButton = $('.export'),\r\n      importButton = $('.import');\r\n\r\n  exportButton.click(() => {\r\n    exportConfig();\r\n  });\r\n\r\n  importButton.click(() => {\r\n    importConfig();\r\n  });\r\n\r\n  $('#importFile').change((event) => {\r\n    if (event.target.files.length) {\r\n      $('.import-file-label').html(event.target.files[0].name);\r\n    }\r\n  });\r\n\r\n  browser.storage.local.get(searchModeKey).then((storedSearchMode) => {\r\n    let storedSearchModeBool = storedSearchMode[searchModeKey] || false;\r\n    $('#enable-regexp').prop('checked', storedSearchModeBool);\r\n  }, onError);\r\n\r\n  $('#enable-regexp').change((event) => {\r\n    let enableRegexpValue = $(event.target).is(':checked');\r\n    browser.storage.local.set({ [searchModeKey] : enableRegexpValue }).then(() => {\r\n      showMessage(noticeSettingSaved);\r\n    }, onError);\r\n  });\r\n\r\n  exportButton.html('<i class=\"fas fa-download fa-lg\"></i> ' + buttonExport);\r\n  importButton.html('<i class=\"fas fa-upload fa-lg\"></i> ' + buttonImport);\r\n  $('.import-file-label').html(inputChooseFile);\r\n  $('#import-warning').html(importWarning);\r\n  $('#enable-regexp-label').html(inputEnableRegExp);\r\n\r\n  $('#settings-section-label').html('<i class=\"fas fa-cog\"></i> ' + optionsSettingsSection);\r\n  $('#export-import-section-label').html('<i class=\"fas fa-sync-alt\"></i> ' + optionsExportImportSection);\r\n  $('#font-label').html(inputFontLabel);\r\n  $('#font-picker-help-block').html(inputFontHelpText);\r\n  $('#enable-regexp-help-block').html(inputRegExpHelpText);\r\n\r\n  $('#font-picker').fontpicker({\r\n    lang: languageCodeTwoChar,\r\n    variants: true,\r\n    lazyLoad: true,\r\n    showClear: true,\r\n    nrRecents: 0,\r\n    localFonts: {\r\n      \"Arial\": {\r\n        \"category\": \"sans-serif\",\r\n        \"variants\": \"400,400i,600,600i\"\r\n      },\r\n      \"Georgia\": {\r\n        \"category\": \"serif\",\r\n        \"variants\": \"400,400i,600,600i\"\r\n      },\r\n      \"Times New Roman\": {\r\n        \"category\": \"serif\",\r\n        \"variants\": \"400,400i,600,600i\"\r\n      },\r\n      \"Verdana\": {\r\n        \"category\": \"sans-serif\",\r\n        \"variants\": \"400,400i,600,600i\",\r\n      }/*,\r\n      \"Action Man\": {},\r\n      \"Bauer\": {\r\n        \"category\": \"display\",\r\n        \"variants\": \"400,400i,600,600i\",\r\n        \"subsets\": \"latin-ext,latin\"\r\n      },\r\n      \"Bubble\": {\r\n        \"category\": \"display\",\r\n        \"variants\": \"400,400i,600,600i\",\r\n        \"subsets\": \"latin-ext,latin\"\r\n      }*/\r\n    },\r\n    localFontsUrl: '/libraries/fontpicker/fonts/',\r\n    onSelect: function(fontObject) {\r\n      let fontStoreValue = fontObject.fontType + ':' + fontObject.fontSpec;\r\n\r\n      browser.storage.local.set({[fontKey] : fontStoreValue}).then(() => {\r\n        showMessage(noticeSettingSaved);\r\n      });\r\n    }\r\n  });\r\n\r\n  browser.storage.local.get(fontKey).then((storedFont) => {\r\n    let fontString = storedFont[fontKey] || '';\r\n\r\n    if (fontString) {\r\n      let fontTmp = fontString.split(':'),\r\n          font = fontTmp[1],\r\n          variant = fontTmp[2];\r\n\r\n      $('#font-picker').val(font + ':' + variant).trigger('change');\r\n    }\r\n  });\r\n\r\n  $('.fp-clear').click(() => {\r\n    browser.storage.local.set({[fontKey] : ''}).then(() => {\r\n      showMessage(noticeSettingSaved);\r\n    });\r\n  });\r\n});\r\n"]}