{"version":3,"sources":["options.js"],"names":["exportFile","onError","error","console","log","showMessage","textMsg","errorFlag","messageClass","$","length","remove","append","saveSettings","urlIn","colorIn","labelIn","positionIn","settingUrl","settingColor","settingLabel","settingPosition","browser","storage","local","get","then","result","Object","keys","storeSetting","set","[object Object]","makeJsonExportFile","text","data","Blob","type","window","URL","revokeObjectURL","createObjectURL","exportConfig","results","settingsUrls","configurations","push","url","color","label","position","configurations_json","JSON","stringify","link","document","createElement","setAttribute","href","body","appendChild","requestAnimationFrame","event","MouseEvent","dispatchEvent","removeChild","importConfig","importFileInput","getElementById","importFile","files","reader","FileReader","addEventListener","import_config_obj","parse","forEach","arrayItem","html","value","readAsText","ready","click","change","target","name"],"mappings":"AAAA,IAAIA,WAAa,KAEjB,SAASC,QAAQC,GACbC,QAAQC,IAAIF,GAIhB,SAASG,YAAYC,EAASC,GAAY,GACtC,IAAIC,EAAeD,EAAY,eAAiB,gBAC5CE,EAAE,4CAA4CC,QAC9CD,EAAE,4CAA4CE,SAC9CF,EAAE,qCAAqCG,OAAO,qBAAuBJ,EAAe,YAAcF,EAAU,WAE5GG,EAAE,qCAAqCG,OAAO,qBAAuBJ,EAAe,YAAcF,EAAU,UAKpH,SAASO,aAAaC,EAAOC,EAASC,EAASC,GAC3C,IAAIC,EAAaJ,EACbK,EAAeJ,EACfK,EAAeJ,EACfK,EAAmBJ,EAEJ,KAAfC,GAAsC,KAAjBC,GAAwC,KAAjBC,EAC5CE,QAAQC,QAAQC,MAAMC,IAAIP,GAAYQ,KAAMC,IAC1BC,OAAOC,KAAKF,GAEdjB,OAAS,EACjBoB,aAAaZ,EAAYC,EAAcC,EAAcC,GAGrDhB,YAAY,uCAAuC,IAExDJ,SAGmBI,YAAL,KAAjBe,EAAkC,gBAAqC,eAApB,GAK3D,SAASU,aAAaZ,EAAYC,EAAcC,EAAcC,GAC1DC,QAAQC,QAAQC,MAAMO,IAAI,CAAEC,CAACd,GAAc,CAACC,EAAcC,EAAcC,KAAoBK,KAAK,OAE9FzB,SAIP,SAASgC,mBAAmBC,GACxB,IAAIC,EAAO,IAAIC,KAAK,CAACF,GAAO,CAAEG,KAAM,qBASpC,OALmB,OAAfrC,YACAsC,OAAOC,IAAIC,gBAAgBxC,YAG/BA,WAAasC,OAAOC,IAAIE,gBAAgBN,GACjCnC,WAIX,SAAS0C,eACLpB,QAAQC,QAAQC,MAAMC,IAAI,MAAMC,KAAMiB,IAClC,IAAIC,EAAehB,OAAOC,KAAKc,GAC3BE,EAAiB,GAErB,GAAID,EAAalC,OAAS,EAAG,CACzB,IAAK,IAAIQ,KAAc0B,EACnBC,EAAeC,KAAK,CAChBC,IAAQ7B,EACR8B,MAAUL,EAAQzB,GAAY,GAC9B+B,MAAUN,EAAQzB,GAAY,GAC9BgC,SAAaP,EAAQzB,GAAY,KAIzC,IAAIiC,EAAsBC,KAAKC,UAAUR,GACrCS,EAAOC,SAASC,cAAc,KAClCF,EAAKG,aAAa,WAAY,gBAC9BH,EAAKI,KAAOzB,mBAAmBkB,GAC/BI,SAASI,KAAKC,YAAYN,GAG1BhB,OAAOuB,uBAAsB,WACzB,IAAIC,EAAQ,IAAIC,WAAW,SAC3BT,EAAKU,cAAcF,GACnBP,SAASI,KAAKM,YAAYX,GAE1BjD,YAAY,8BAGhBA,YAAY,sBAAsB,IAEvCJ,SAIP,SAASiE,eACL,IAAIC,EAAkBZ,SAASa,eAAe,cAC1CC,EAAaF,EAAgBG,MAAM,GAEvC,GAAID,EAAY,CACZ,MAAME,EAAS,IAAIC,WAGnBD,EAAOE,iBAAiB,QAAQ,WAC5B,IAAIC,EAAoBtB,KAAKuB,MAAMJ,EAAO5C,QAEtC+C,EAAkBhE,OAAS,IAC3BgE,EAAkBE,SAAQ,SAASC,GAC/BhE,aAAagE,EAAU9B,IAAK8B,EAAU7B,MAAO6B,EAAU5B,MAAO4B,EAAU3B,aAG5E7C,YAAY,2BAGhBI,EAAE,sBAAsBqE,KAAK,eAC7BX,EAAgBY,MAAQ,MAG5BR,EAAOS,WAAWX,QAElBhE,YAAY,kBAIpBI,EAAE8C,UAAU0B,MAAM,KACdxE,EAAE,WAAWyE,MAAM,KACfxC,iBAGJjC,EAAE,WAAWyE,MAAM,KACfhB,iBAGJzD,EAAE,eAAe0E,OAAQrB,IACjBA,EAAMsB,OAAOd,MAAM5D,QACnBD,EAAE,sBAAsBqE,KAAKhB,EAAMsB,OAAOd,MAAM,GAAGe","file":"options.min.js","sourcesContent":["let exportFile = null;\r\n\r\nfunction onError(error) {\r\n    console.log(error);\r\n}\r\n\r\n/* Show error message */\r\nfunction showMessage(textMsg, errorFlag = false) {\r\n    let messageClass = errorFlag ? 'alert-danger' : 'alert-success';\r\n    if ($('.outer-wrapper .message-container .alert').length) {\r\n        $('.outer-wrapper .message-container .alert').remove();\r\n        $('.outer-wrapper .message-container').append('<div class=\"alert ' + messageClass + ' col-12\">' + textMsg + '</div>');\r\n    } else {\r\n        $('.outer-wrapper .message-container').append('<div class=\"alert ' + messageClass + ' col-12\">' + textMsg + '</div>');\r\n    }\r\n}\r\n\r\n/* Add a setting to the display and storage */\r\nfunction saveSettings(urlIn, colorIn, labelIn, positionIn) {\r\n    let settingUrl = urlIn,\r\n        settingColor = colorIn,\r\n        settingLabel = labelIn,\r\n        settingPosition =  positionIn;\r\n\r\n    if (settingUrl !== '' && settingColor !== '' && settingLabel !== '') {\r\n        browser.storage.local.get(settingUrl).then((result) => {\r\n            let objTest = Object.keys(result);\r\n\r\n            if (objTest.length < 1) {\r\n                storeSetting(settingUrl, settingColor, settingLabel, settingPosition);\r\n            } else {\r\n                // Duplicate marker error message\r\n                showMessage('Marker for this URL already exists!', true);\r\n            }\r\n        }, onError);\r\n    } else {\r\n        // Empty input error message\r\n        settingLabel === '' ? showMessage('Enter Label !', true) : showMessage('Enter URL !', true);\r\n    }\r\n}\r\n\r\n/* Store a new setting in local storage */\r\nfunction storeSetting(settingUrl, settingColor, settingLabel, settingPosition) {\r\n    browser.storage.local.set({ [settingUrl] : [settingColor, settingLabel, settingPosition] }).then(() => {\r\n        // Success\r\n    }, onError);\r\n}\r\n\r\n/* Make a URL Object from json text */\r\nfunction makeJsonExportFile(text) {\r\n    let data = new Blob([text], { type: 'application/json' });\r\n\r\n    // If we are replacing a previously generated file we need to\r\n    // manually revoke the object URL to avoid memory leaks.\r\n    if (exportFile !== null) {\r\n        window.URL.revokeObjectURL(exportFile);\r\n    }\r\n\r\n    exportFile = window.URL.createObjectURL(data);\r\n    return exportFile;\r\n}\r\n\r\n/* Get all configurations from the storage and output a json file */\r\nfunction exportConfig() {\r\n    browser.storage.local.get(null).then((results) => {\r\n        let settingsUrls = Object.keys(results),\r\n            configurations = [];\r\n\r\n        if (settingsUrls.length > 0) {\r\n            for (let settingUrl of settingsUrls) {\r\n                configurations.push({\r\n                    \"url\" : settingUrl,\r\n                    \"color\" : results[settingUrl][0],\r\n                    \"label\" : results[settingUrl][1],\r\n                    \"position\" : results[settingUrl][2]\r\n                });\r\n            }\r\n\r\n            let configurations_json = JSON.stringify(configurations);\r\n            let link = document.createElement('a');\r\n            link.setAttribute('download', 'ribbons.json');\r\n            link.href = makeJsonExportFile(configurations_json);\r\n            document.body.appendChild(link);\r\n\r\n            // wait for the link to be added to the document\r\n            window.requestAnimationFrame(function () {\r\n                let event = new MouseEvent('click');\r\n                link.dispatchEvent(event);\r\n                document.body.removeChild(link);\r\n\r\n                showMessage('Export successful!');\r\n            });\r\n        } else {\r\n            showMessage('Nothing to export!', true);\r\n        }\r\n    }, onError);\r\n}\r\n\r\n/* Read import file and load all settings into the stoage */\r\nfunction importConfig() {\r\n    let importFileInput = document.getElementById(\"importFile\"),\r\n        importFile = importFileInput.files[0];\r\n\r\n    if (importFile) {\r\n        const reader = new FileReader();\r\n\r\n        // This event listener will happen when the reader has read the file\r\n        reader.addEventListener('load', function() {\r\n            let import_config_obj = JSON.parse(reader.result); // Parse the result into an object\r\n\r\n            if (import_config_obj.length > 0) {\r\n                import_config_obj.forEach(function(arrayItem) {\r\n                    saveSettings(arrayItem.url, arrayItem.color, arrayItem.label, arrayItem.position)\r\n                });\r\n\r\n                showMessage('Imported successfully!');\r\n            }\r\n\r\n            $('.import-file-label').html('Choose file');\r\n            importFileInput.value = '';\r\n        });\r\n\r\n        reader.readAsText(importFile); // Read the uploaded file\r\n    } else {\r\n        showMessage('Choose a file!');\r\n    }\r\n}\r\n\r\n$(document).ready(() => {\r\n    $('.export').click(() => {\r\n        exportConfig();\r\n    });\r\n\r\n    $('.import').click(() => {\r\n        importConfig();\r\n    });\r\n\r\n    $('#importFile').change((event) => {\r\n        if (event.target.files.length) {\r\n            $('.import-file-label').html(event.target.files[0].name);\r\n        }\r\n    });\r\n});\r\n"]}