let errorDuplicateMarker=browser.i18n.getMessage("errorDuplicateMarker"),errorLabelEmpty=browser.i18n.getMessage("errorLabelEmpty"),errorUrlEmpty=browser.i18n.getMessage("errorUrlEmpty"),noticeSuccessExport=browser.i18n.getMessage("noticeSuccessExport"),noticeSuccessImport=browser.i18n.getMessage("noticeSuccessImport"),errorNoRibbonsToExport=browser.i18n.getMessage("errorNoRibbonsToExport"),errorChooseFile=browser.i18n.getMessage("errorChooseFile"),inputChooseFile=browser.i18n.getMessage("inputChooseFile"),buttonExport=browser.i18n.getMessage("buttonExport"),buttonImport=browser.i18n.getMessage("buttonImport"),importWarning=browser.i18n.getMessage("importWarning"),errorImportLabelEmpty=browser.i18n.getMessage("errorImportLabelEmpty"),errorImportUrlEmpty=browser.i18n.getMessage("errorImportUrlEmpty"),errorImportColorEmpty=browser.i18n.getMessage("errorImportColorEmpty"),inputEnableRegExp=browser.i18n.getMessage("inputEnableRegExp"),noticeSettingSaved=browser.i18n.getMessage("noticeSettingSaved"),ariaLabelAlertClose=browser.i18n.getMessage("ariaLabelAlertClose"),exportFile=null;const markersKey="__em-markers__",searchModeKey="__em-search-mode__",exportFileName="ribbons.json";function onError(e){console.log(e)}function showMessage(e,r=!1){let o=r?"alert-danger":"alert-success";$(".outer-wrapper .message-container .alert").length&&$(".outer-wrapper .message-container .alert").remove(),$(".outer-wrapper .message-container").append('<div class="alert '+o+' alert-dismissible fade show" role="alert">'+e+'<button type="button" class="close" data-dismiss="alert" aria-label="'+ariaLabelAlertClose+'"><span aria-hidden="true">&times;</span></button></div>')}function makeJsonExportFile(e){let r=new Blob([e],{type:"application/json"});return null!==exportFile&&window.URL.revokeObjectURL(exportFile),exportFile=window.URL.createObjectURL(r),exportFile}function exportConfig(){browser.storage.local.get(markersKey).then(e=>{let r=e[markersKey]||[],o=[];if(r.length>0){for(let e of r)o.push({url:e.settingUrl,color:e.settingColor,label:e.settingLabel,position:e.settingPosition,size:e.settingSize});let e=JSON.stringify(o),t=document.createElement("a");t.setAttribute("download","ribbons.json"),t.href=makeJsonExportFile(e),document.body.appendChild(t),window.requestAnimationFrame((function(){let e=new MouseEvent("click");t.dispatchEvent(e),document.body.removeChild(t),showMessage(noticeSuccessExport)}))}else showMessage(errorNoRibbonsToExport,!0)},onError)}async function importConfig(){let e=document.getElementById("importFile"),r=e.files[0];if(r){const o=new FileReader;o.addEventListener("load",(function(){let r=JSON.parse(o.result);if(r.length>0){let o=[],t="";for(let e of r)if(""!==e.url&&""!==e.color&&""!==e.label){let r={settingUrl:e.url,settingColor:e.color,settingLabel:e.label,settingPosition:e.position,settingSize:e.size};o.push(r)}else""===e.url&&(t+="<li>"+errorImportUrlEmpty+"</li>"),""===e.label&&(t+="<li>"+errorImportLabelEmpty+"</li>"),""===e.color&&(t+="<li>"+errorImportColorEmpty+"</li>");$(".import-file-label").html(inputChooseFile),e.value="",""!==t?showMessage("<ul>"+t+"</ul>",!0):browser.storage.local.set({[markersKey]:o}).then(()=>{showMessage(noticeSuccessImport)},onError)}})),o.readAsText(r)}else showMessage(errorChooseFile,!0)}$(document).ready(()=>{$(".export").click(()=>{exportConfig()}),$(".import").click(()=>{importConfig()}),$("#importFile").change(e=>{e.target.files.length&&$(".import-file-label").html(e.target.files[0].name)}),browser.storage.local.get(searchModeKey).then(e=>{let r=e[searchModeKey]||!1;$("#enable-regexp").prop("checked",r)},onError),$("#enable-regexp").change(e=>{let r=$(e.target).is(":checked");browser.storage.local.set({[searchModeKey]:r}).then(()=>{showMessage(noticeSettingSaved)},onError)}),$(".export").html('<i class="fas fa-download fa-lg"></i> '+buttonExport),$(".import").html('<i class="fas fa-upload fa-lg"></i> '+buttonImport),$(".import-file-label").html(inputChooseFile),$("#import-warning").html(importWarning),$("#enable-regexp-label").html(inputEnableRegExp)});
//# sourceMappingURL=options.min.js.map
