let noticeSuccessExport=browser.i18n.getMessage("noticeSuccessExport"),noticeSuccessImport=browser.i18n.getMessage("noticeSuccessImport"),errorNoRibbonsToExport=browser.i18n.getMessage("errorNoRibbonsToExport"),errorChooseFile=browser.i18n.getMessage("errorChooseFile"),inputChooseFile=browser.i18n.getMessage("inputChooseFile"),buttonExport=browser.i18n.getMessage("buttonExport"),buttonImport=browser.i18n.getMessage("buttonImport"),importWarning=browser.i18n.getMessage("importWarning"),errorImportLabelEmpty=browser.i18n.getMessage("errorImportLabelEmpty"),errorImportUrlEmpty=browser.i18n.getMessage("errorImportUrlEmpty"),errorImportColorEmpty=browser.i18n.getMessage("errorImportColorEmpty"),inputEnableRegExp=browser.i18n.getMessage("inputEnableRegExp"),inputEnableTabCounter=browser.i18n.getMessage("inputEnableTabCounter"),inputEnableFaviconMarker=browser.i18n.getMessage("inputEnableFaviconMarker"),noticeSettingSaved=browser.i18n.getMessage("noticeSettingSaved"),ariaLabelAlertClose=browser.i18n.getMessage("ariaLabelAlertClose"),optionsSettingsSection=browser.i18n.getMessage("optionsSettingsSection"),optionsExportImportSection=browser.i18n.getMessage("optionsExportImportSection"),inputFontLabel=browser.i18n.getMessage("inputFontLabel"),inputFontHelpText=browser.i18n.getMessage("inputFontHelpText"),inputRegExpHelpText=browser.i18n.getMessage("inputRegExpHelpText"),inputTabCounterHelpText=browser.i18n.getMessage("inputTabCounterHelpText"),inputEnableFaviconMarkerHelpText=browser.i18n.getMessage("inputEnableFaviconMarkerHelpText"),errorFileEmptyOrFormat=browser.i18n.getMessage("errorFileEmptyOrFormat"),buttonOptions=browser.i18n.getMessage("buttonOptions"),exportFile=null,languageCode=browser.i18n.getUILanguage(),languageCodeTwoChar=languageCode.split("-")[0];const markersKey="__em-markers__",searchModeKey="__em-search-mode__",tabCounterKey="__em-tab-counter__",faviconMarkerKey="__em-favicon-marker__",swatchesKey="__em-swatches__",dbVersionKey="__em-version__",fontKey="__em-font__",exportFileName="environment-marker-export.json";function onError(e){console.log(e)}function showMessage(e,t=!1){let r=t?"alert-danger":"alert-success";$(".alert-dismissible").length&&$(".alert-dismissible").alert("close"),$(".outer-wrapper .message-container").append('<div class="alert '+r+' alert-dismissible fade show" role="alert">'+e+'<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="'+ariaLabelAlertClose+'"></button></div>'),window.setTimeout((function(){$(".alert-dismissible").alert("close")}),3e3)}function makeJsonExportFile(e){let t=new Blob([e],{type:"application/json"});return null!==exportFile&&window.URL.revokeObjectURL(exportFile),exportFile=window.URL.createObjectURL(t),exportFile}function exportConfig(){let e={markers:[],settings:[]};browser.storage.sync.get(markersKey).then((t=>{let r=t[markersKey]||[];0==r.length?showMessage(errorNoRibbonsToExport,!0):browser.storage.sync.get([fontKey,searchModeKey,tabCounterKey,swatchesKey,faviconMarkerKey]).then((t=>{let o=t[fontKey]||"",n=t[searchModeKey]||!1,s=t[tabCounterKey]||!1,a=t[faviconMarkerKey]||!1,i=t[swatchesKey];for(let t of r)e.markers.push({url:t.settingUrl,color:t.settingColor,label:t.settingLabel,position:t.settingPosition,size:t.settingSize});e.settings.push({fontString:o}),e.settings.push({searchModeBool:n}),e.settings.push({tabCounterBool:s}),e.settings.push({faviconMarkerBool:a}),e.settings.push({colorSwatchesArray:i});let l=JSON.stringify(e),c=document.createElement("a");c.setAttribute("download",exportFileName),c.href=makeJsonExportFile(l),document.body.appendChild(c),window.requestAnimationFrame((function(){let e=new MouseEvent("click");c.dispatchEvent(e),document.body.removeChild(c),showMessage(noticeSuccessExport)}))}))}),onError)}function importConfig(){let e=document.getElementById("importFile"),t=e.files[0];if(t){const r=new FileReader;r.addEventListener("load",(function(){let t=JSON.parse(r.result);if(t.hasOwnProperty("markers")&&t.hasOwnProperty("settings")){let r=[],o="";if(t.settings.length>0)for(let e of t.settings)e.hasOwnProperty("searchModeBool")&&browser.storage.sync.set({[searchModeKey]:e.searchModeBool}).then((()=>{}),onError),e.hasOwnProperty("tabCounterBool")&&browser.storage.sync.set({[tabCounterKey]:e.tabCounterBool}).then((()=>{}),onError),e.hasOwnProperty("faviconMarkerBool")&&browser.storage.sync.set({[faviconMarkerKey]:e.faviconMarkerBool}).then((()=>{}),onError),e.hasOwnProperty("fontString")&&browser.storage.sync.set({[fontKey]:e.fontString}).then((()=>{}),onError),e.hasOwnProperty("colorSwatchesArray")&&browser.storage.sync.set({[swatchesKey]:e.colorSwatchesArray}).then((()=>{}),onError);if(t.markers.length>0)for(let e of t.markers)if(""!==e.url&&""!==e.color&&""!==e.label){let t={settingUrl:e.url,settingColor:e.color,settingLabel:e.label,settingPosition:e.position,settingSize:e.size};r.push(t)}else""===e.url&&(o+="<li>"+errorImportUrlEmpty+"</li>"),""===e.label&&(o+="<li>"+errorImportLabelEmpty+"</li>"),""===e.color&&(o+="<li>"+errorImportColorEmpty+"</li>");$(".import-file-label").html(inputChooseFile),e.value="",""!==o?showMessage("<ul>"+o+"</ul>",!0):browser.storage.sync.set({[markersKey]:r}).then((()=>{showMessage(noticeSuccessImport)}),onError)}else showMessage(errorFileEmptyOrFormat,!0)})),r.readAsText(t)}else showMessage(errorChooseFile,!0)}$(document).ready((()=>{$("html").attr("lang",languageCode),document.title="Environment Marker - "+buttonOptions;let e=$(".export"),t=$(".import");e.click((()=>{exportConfig()})),t.click((()=>{importConfig()})),$("#importFile").change((e=>{e.target.files.length&&$(".import-file-label").html(e.target.files[0].name)})),browser.storage.sync.get(searchModeKey).then((e=>{let t=e[searchModeKey]||!1;$("#enable-regexp").prop("checked",t)}),onError),$("#enable-regexp").change((e=>{let t=$(e.target).is(":checked");browser.storage.sync.set({[searchModeKey]:t}).then((()=>{showMessage(noticeSettingSaved)}),onError)})),browser.storage.sync.get(tabCounterKey).then((e=>{let t=e[tabCounterKey]||!1;$("#enable-tab-counter").prop("checked",t)}),onError),$("#enable-tab-counter").change((e=>{let t=$(e.target).is(":checked");browser.storage.sync.set({[tabCounterKey]:t}).then((()=>{showMessage(noticeSettingSaved)}),onError)})),browser.storage.sync.get(faviconMarkerKey).then((e=>{let t=e[faviconMarkerKey]||!1;$("#enable-favicon-marker").prop("checked",t)}),onError),$("#enable-favicon-marker").change((e=>{let t=$(e.target).is(":checked");browser.storage.sync.set({[faviconMarkerKey]:t}).then((()=>{showMessage(noticeSettingSaved)}),onError)})),e.html('<i class="fas fa-download fa-lg"></i> '+buttonExport),t.html('<i class="fas fa-upload fa-lg"></i> '+buttonImport),$(".import-file-label").html(inputChooseFile),$("#import-warning").html(importWarning),$("#enable-regexp-label").html(inputEnableRegExp),$("#enable-tab-counter-label").html(inputEnableTabCounter),$("#enable-favicon-marker-label").html(inputEnableFaviconMarker),$("#settings-section-label").html('<i class="fas fa-cog"></i> '+optionsSettingsSection),$("#export-import-section-label").html('<i class="fas fa-sync-alt"></i> '+optionsExportImportSection),$("#font-label").html(inputFontLabel),$("#font-picker-help-block").html(inputFontHelpText),$("#enable-regexp-help-block").html(inputRegExpHelpText),$("#enable-tab-counter-help-block").html(inputTabCounterHelpText),$("#enable-favicon-marker-help-block").html(inputEnableFaviconMarkerHelpText),$("#font-picker").fontpicker({lang:languageCodeTwoChar,variants:!0,lazyLoad:!0,showClear:!0,nrRecents:0,localFonts:{Arial:{category:"sans-serif",variants:"400,400i,600,600i"},Georgia:{category:"serif",variants:"400,400i,600,600i"},"Times New Roman":{category:"serif",variants:"400,400i,600,600i"},Verdana:{category:"sans-serif",variants:"400,400i,600,600i"}},localFontsUrl:"/libraries/fontpicker/fonts/",onSelect:function(e){let t=e.fontType+":"+e.fontSpec;browser.storage.sync.set({[fontKey]:t}).then((()=>{showMessage(noticeSettingSaved)}),onError)}}),browser.storage.sync.get(fontKey).then((e=>{let t=e[fontKey]||"";if(t){let e=t.split(":"),r=e[1],o=e[2];$("#font-picker").val(r+":"+o).trigger("change")}})),$(".fp-clear").click((()=>{browser.storage.sync.set({[fontKey]:""}).then((()=>{showMessage(noticeSettingSaved)}),onError)}))}));
//# sourceMappingURL=options.min.js.map
