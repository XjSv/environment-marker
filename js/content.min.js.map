{"version":3,"sources":["content.js"],"names":["insertRibbon","color","url","label","position","size","removeExistingRibbon","ribbonWrapper","document","createElement","textColor","hexcolor","replace","r","parseInt","substr","g","b","getContrastYIQ","undefined","className","ribbon","setAttribute","textContent","str","num","length","slice","truncateString","appendChild","body","existingRibbons","querySelectorAll","remove","window","hasRun","browser","runtime","onMessage","addListener","message","command","Promise","resolve"],"mappings":"CAAA,WAcE,SAASA,EAAaC,EAAOC,EAAKC,EAAOC,EAAUC,GACjDC,IAEA,IAAIC,EAAgBC,SAASC,cAAc,OACvCC,EA2BN,SAAwBC,GACtBA,EAAWA,EAASC,QAAQ,IAAK,IACjC,IAAIC,EAAIC,SAASH,EAASI,OAAO,EAAG,GAAI,IACpCC,EAAIF,SAASH,EAASI,OAAO,EAAG,GAAI,IACpCE,EAAIH,SAASH,EAASI,OAAO,EAAG,GAAI,IAGxC,OAFgB,IAAJF,EAAgB,IAAJG,EAAgB,IAAJC,GAAY,KAEjC,IAAO,QAAU,QAlChBC,CAAejB,QAIlBkB,IAATd,IACFA,EAAO,UAGTE,EAAca,UAAY,wBAA0BhB,EAAW,eAAiBC,EAAO,kBAEvF,IAAIgB,EAASb,SAASC,cAAc,OACpCY,EAAOC,aAAa,QAAS,qBAAuBrB,EAAQ,YAAcS,EAAY,KACtFW,EAAOD,UAAY,gBAAkBf,EAAO,cAAgBD,EAAW,UACvEiB,EAAOE,YAOT,SAAwBC,EAAKC,GAC3B,GAAID,EAAIE,QAAUD,EAChB,OAAOD,EAET,OAAOA,EAAIG,MAAM,EAAGF,GAAO,MAXNG,CAAezB,EAAO,IAE3CI,EAAcsB,YAAYR,GAE1Bb,SAASsB,KAAKD,YAAYtB,GAuB5B,SAASD,IACP,IAAIyB,EAAkBvB,SAASwB,iBAAiB,sBAChD,IAAK,IAAIX,KAAUU,EACjBV,EAAOY,SAvDPC,OAAOC,QAA4B,oBAAXC,UAG5BF,OAAOC,QAAS,EA4DhBC,QAAQC,QAAQC,UAAUC,YAAcC,IACd,cAApBA,EAAQC,QACVzC,EAAawC,EAAQvC,MAAOuC,EAAQtC,IAAKsC,EAAQrC,MAAOqC,EAAQpC,SAAUoC,EAAQnC,MACrD,UAApBmC,EAAQC,SACjBnC,IAEKoC,QAAQC,QAAQ,WA3E3B","file":"content.min.js","sourcesContent":["(function() {\r\n  /**\r\n   * Check and set a global guard variable.\r\n   * If this content script is injected into the same page again,\r\n   * it will do nothing next time.\r\n   */\r\n  if (window.hasRun || typeof browser == \"undefined\") {\r\n    return;\r\n  }\r\n  window.hasRun = true;\r\n\r\n  /**\r\n   * Given a URL, background color create a ribbon and add it to the page.\r\n   */\r\n  function insertRibbon(color, url, label, position, size) {\r\n    removeExistingRibbon();\r\n\r\n    let ribbonWrapper = document.createElement('div'),\r\n        textColor = getContrastYIQ(color);\r\n\r\n    // For backwards compatibility for users that already have ribbons configured.\r\n    // @TODO: Remove sometime in the future\r\n    if (size === undefined) {\r\n      size = 'normal'\r\n    }\r\n\r\n    ribbonWrapper.className = 'em-ribbon-wrapper em-' + position + '-wrapper em-' + size + '-ribbon-wrapper';\r\n\r\n    let ribbon = document.createElement('div');\r\n    ribbon.setAttribute('style', 'background-color: ' + color + '; color: ' + textColor + ';');\r\n    ribbon.className = 'em-ribbon em-' + size + '-ribbon em-' + position + '-ribbon';\r\n    ribbon.textContent = truncateString(label, 10);\r\n\r\n    ribbonWrapper.appendChild(ribbon);\r\n\r\n    document.body.appendChild(ribbonWrapper);\r\n  }\r\n\r\n  function truncateString(str, num) {\r\n    if (str.length <= num) {\r\n      return str\r\n    }\r\n    return str.slice(0, num) + '...'\r\n  }\r\n\r\n  function getContrastYIQ(hexcolor) {\r\n    hexcolor = hexcolor.replace('#', '');\r\n    let r = parseInt(hexcolor.substr(0, 2), 16),\r\n        g = parseInt(hexcolor.substr(2, 2), 16),\r\n        b = parseInt(hexcolor.substr(4, 2), 16),\r\n        yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\r\n\r\n    return (yiq >= 128) ? 'black' : 'white';\r\n  }\r\n\r\n  /**\r\n   * Remove the ribbon from the page.\r\n   */\r\n  function removeExistingRibbon() {\r\n    let existingRibbons = document.querySelectorAll('.em-ribbon-wrapper');\r\n    for (let ribbon of existingRibbons) {\r\n      ribbon.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listen for messages from the background script.\r\n   * Call \"addRibbon()\" or \"reset()\".\r\n  */\r\n  browser.runtime.onMessage.addListener( (message) => {\r\n    if (message.command === 'addRibbon') {\r\n      insertRibbon(message.color, message.url, message.label, message.position, message.size);\r\n    } else if (message.command === 'reset') {\r\n      removeExistingRibbon();\r\n    }\r\n    return Promise.resolve('done');\r\n  });\r\n\r\n})();\r\n"]}