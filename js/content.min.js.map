{"version":3,"sources":["content.js"],"names":["insertRibbon","color","url","label","fontSize","position","size","fontData","removeExistingRibbon","removeExistingStylesheets","ribbonWrapper","document","createElement","ribbon","textColor","hexColor","replace","r","parseInt","substr","g","b","getContrastYIQ","undefined","className","textContent","str","num","length","slice","truncateString","appendChild","fontTmp","split","fontLocation","font","variant","weight","italic","test","setAttribute","googleFontStylesheet","href","type","rel","head","style","innerHTML","body","existingRibbons","querySelectorAll","remove","existingStylesheet","stylesheet","window","hasRun","browser","runtime","onMessage","addListener","message","command","Promise","resolve"],"mappings":"CAAA,WAcE,SAASA,EAAaC,EAAOC,EAAKC,EAAOC,EAAUC,EAAUC,EAAMC,GACjEC,IACAC,IAEA,IAAIC,EAAgBC,SAASC,cAAc,OACvCC,EAASF,SAASC,cAAc,OAChCE,EA6DN,SAAwBC,GACtBA,EAAWA,EAASC,QAAQ,IAAK,IACjC,IAAIC,EAAIC,SAASH,EAASI,OAAO,EAAG,GAAI,IACpCC,EAAIF,SAASH,EAASI,OAAO,EAAG,GAAI,IACpCE,EAAIH,SAASH,EAASI,OAAO,EAAG,GAAI,IAGxC,OAFgB,IAAJF,EAAgB,IAAJG,EAAgB,IAAJC,GAAY,KAEjC,IAAO,QAAU,QApEhBC,CAAerB,GAmB/B,QAfiBsB,IAAbnB,IACFA,EAAW,WAKAmB,IAATjB,IACFA,EAAO,UAGTI,EAAcc,UAAY,wBAA0BnB,EAAW,eAAiBC,EAAO,kBACvFO,EAAOW,UAAY,gBAAkBlB,EAAO,cAAgBD,EAAW,UACvEQ,EAAOY,YAsCT,SAAwBC,EAAKC,GAC3B,GAAID,EAAIE,QAAUD,EAChB,OAAOD,EAET,OAAOA,EAAIG,MAAM,EAAGF,GAAO,MA1CNG,CAAe3B,EAAO,IAC3CO,EAAcqB,YAAYlB,GAEtBN,EAAU,CACZ,IAAIyB,EAAUzB,EAAS0B,MAAM,KACzBC,EAAeF,EAAQ,GACvBG,EAAOH,EAAQ,GACfI,EAAUJ,EAAQ,IAAM,MACxBK,EAASnB,SAASkB,EAAQ,IAC1BE,EAAS,KAAKC,KAAKH,GAUvB,GARAvB,EAAO2B,aAAa,QAChB,qBAAuBvC,EACvB,YAAca,EACd,gBAAkBV,EAClB,qBAAuB+B,EACvB,mBAAqBE,EACrB,kBAAoBC,EAAS,SAAW,UAAY,KAEnC,WAAjBJ,EAA2B,CAC7B,IAAIO,EAAuB9B,SAASC,cAAc,QAC9C6B,EAAqBC,KAAO,2CAA6CP,EAAO,gBAChFM,EAAqBE,KAAO,WAC5BF,EAAqBG,IAAM,aAC3BH,EAAqBjB,UAAY,uBAErCb,SAASkC,KAAKd,YAAYU,OACrB,CACL,IAAIK,EAAQnC,SAASC,cAAc,SACnCkC,EAAMC,UAAY,6BAA+BZ,EAAO,iBAAmBA,EAAO,wCAA0CA,EAAO,4BACnIxB,SAASkC,KAAKd,YAAYe,SAG5BjC,EAAO2B,aAAa,QAAS,qBAAuBvC,EAAQ,YAAca,EAAY,gBAAkBV,EAAW,OAErHO,SAASqC,KAAKjB,YAAYrB,GAuB5B,SAASF,IACP,IAAIyC,EAAkBtC,SAASuC,iBAAiB,sBAChD,IAAK,IAAIrC,KAAUoC,EACjBpC,EAAOsC,SAOX,SAAS1C,IACP,IAAI2C,EAAqBzC,SAASuC,iBAAiB,yBACnD,IAAK,IAAIG,KAAcD,EACrBC,EAAWF,SArGXG,OAAOC,QAA4B,oBAAXC,UAG5BF,OAAOC,QAAS,EA0GhBC,QAAQC,QAAQC,UAAUC,YAAcC,IACd,cAApBA,EAAQC,QACV7D,EAAa4D,EAAQ3D,MAAO2D,EAAQ1D,IAAK0D,EAAQzD,MAAOyD,EAAQxD,SAAUwD,EAAQvD,SAAUuD,EAAQtD,KAAMsD,EAAQzB,MACrF,UAApByB,EAAQC,UACjBrD,IACAC,KAEKqD,QAAQC,QAAQ,WA1H3B","file":"content.min.js","sourcesContent":["(function() {\r\n  /**\r\n   * Check and set a global guard variable.\r\n   * If this content script is injected into the same page again,\r\n   * it will do nothing next time.\r\n   */\r\n  if (window.hasRun || typeof browser == \"undefined\") {\r\n    return;\r\n  }\r\n  window.hasRun = true;\r\n\r\n  /**\r\n   * Given a URL, background color create a ribbon and add it to the page.\r\n   */\r\n  function insertRibbon(color, url, label, fontSize, position, size, fontData) {\r\n    removeExistingRibbon();\r\n    removeExistingStylesheets();\r\n\r\n    let ribbonWrapper = document.createElement('div'),\r\n        ribbon = document.createElement('div'),\r\n        textColor = getContrastYIQ(color);\r\n\r\n    // For backwards compatibility for users that already have ribbons configured.\r\n    // @TODO: Remove sometime in the future\r\n    if (fontSize === undefined) {\r\n      fontSize = '14'\r\n    }\r\n\r\n    // For backwards compatibility for users that already have ribbons configured.\r\n    // @TODO: Remove sometime in the future\r\n    if (size === undefined) {\r\n      size = 'normal'\r\n    }\r\n\r\n    ribbonWrapper.className = 'em-ribbon-wrapper em-' + position + '-wrapper em-' + size + '-ribbon-wrapper';\r\n    ribbon.className = 'em-ribbon em-' + size + '-ribbon em-' + position + '-ribbon';\r\n    ribbon.textContent = truncateString(label, 10);\r\n    ribbonWrapper.appendChild(ribbon);\r\n\r\n    if (fontData) {\r\n      let fontTmp = fontData.split(':'),\r\n          fontLocation = fontTmp[0],\r\n          font = fontTmp[1],\r\n          variant = fontTmp[2] || '400',\r\n          weight = parseInt(variant,10),\r\n          italic = /i$/.test(variant);\r\n\r\n      ribbon.setAttribute('style',\r\n          \"background-color: \" + color +\r\n          \"; color: \" + textColor +\r\n          \"; font-size: \" + fontSize +\r\n          \"px; font-family: '\" + font +\r\n          \"'; font-weight: \" + weight +\r\n          \"; font-style: \" + (italic ? 'italic' : 'normal') + \";\");\r\n\r\n      if (fontLocation === 'google') {\r\n        let googleFontStylesheet = document.createElement('link');\r\n            googleFontStylesheet.href = 'https://fonts.googleapis.com/css?family=' + font + '&display=swap';\r\n            googleFontStylesheet.type = 'text/css';\r\n            googleFontStylesheet.rel = 'stylesheet';\r\n            googleFontStylesheet.className = 'em-google-stylesheet';\r\n\r\n        document.head.appendChild(googleFontStylesheet);\r\n      } else {\r\n        let style = document.createElement('style');\r\n        style.innerHTML = \"@font-face { font-family:'\" + font + \"'; src:local('\" + font + \"'), url('/libraries/fontpicker/fonts/\" + font + \".woff') format('woff'); }\";\r\n        document.head.appendChild(style);\r\n      }\r\n    } else {\r\n      ribbon.setAttribute('style', \"background-color: \" + color + \"; color: \" + textColor + \"; font-size: \" + fontSize + \"px;\");\r\n    }\r\n    document.body.appendChild(ribbonWrapper);\r\n  }\r\n\r\n  function truncateString(str, num) {\r\n    if (str.length <= num) {\r\n      return str\r\n    }\r\n    return str.slice(0, num) + '...'\r\n  }\r\n\r\n  function getContrastYIQ(hexColor) {\r\n    hexColor = hexColor.replace('#', '');\r\n    let r = parseInt(hexColor.substr(0, 2), 16),\r\n        g = parseInt(hexColor.substr(2, 2), 16),\r\n        b = parseInt(hexColor.substr(4, 2), 16),\r\n        yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\r\n\r\n    return (yiq >= 128) ? 'black' : 'white';\r\n  }\r\n\r\n  /**\r\n   * Remove any existing ribbons from the page.\r\n   */\r\n  function removeExistingRibbon() {\r\n    let existingRibbons = document.querySelectorAll('.em-ribbon-wrapper');\r\n    for (let ribbon of existingRibbons) {\r\n      ribbon.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove any stylesheets that have been previously injected from the page.\r\n   */\r\n  function removeExistingStylesheets() {\r\n    let existingStylesheet = document.querySelectorAll('.em-google-stylesheet');\r\n    for (let stylesheet of existingStylesheet) {\r\n      stylesheet.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listen for messages from the background script.\r\n   * Call \"insertRibbon()\" or \"removeExistingRibbon()\".\r\n  */\r\n  browser.runtime.onMessage.addListener( (message) => {\r\n    if (message.command === 'addRibbon') {\r\n      insertRibbon(message.color, message.url, message.label, message.fontSize, message.position, message.size, message.font);\r\n    } else if (message.command === 'reset') {\r\n      removeExistingRibbon();\r\n      removeExistingStylesheets();\r\n    }\r\n    return Promise.resolve('done');\r\n  });\r\n\r\n})();\r\n"]}