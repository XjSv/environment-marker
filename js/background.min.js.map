{"version":3,"sources":["background.js"],"names":["TAB_COUNT_COLOR_LIMIT","TAB_COUNT_COLOR_LOW","TAB_COUNT_COLOR_HIGH","extensionEnabledKey","markersKey","searchModeKey","tabCounterKey","faviconMarkerKey","fontKey","onError","error","console","log","updateCount","tabId","isOnRemoved","browser","storage","sync","get","then","storedTabCounter","tabs","query","length","map","t","id","includes","action","setBadgeText","text","toString","setBadgeBackgroundColor","color","clearCount","updateContent","undefined","tab","url","options","fontString","searchModeRegExp","faviconMarker","storedObject","urlFound","RegExp","settingUrl","test","indexOf","scripting","executeScript","target","files","sendMessage","command","settingColor","label","settingLabel","fontSize","settingFontSize","position","settingPosition","size","settingSize","font","enableFaviconMarker","response","catch","insertCSS","file","extensionEnabledValue","initialize","runtime","onMessage","addListener","request","sender","sendResponse","cmd","set","data","value","removeListeners","onRemovedListener","removeInfo","onCreatedListener","onUpdatedListener","changeInfo","status","onRemoved","onCreated","onUpdated","removeListener"],"mappings":"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","file":"background.min.js","sourcesContent":["const TAB_COUNT_COLOR_LIMIT = 10;\r\nconst TAB_COUNT_COLOR_LOW = '#28a745';\r\nconst TAB_COUNT_COLOR_HIGH ='#dc3545';\r\nconst extensionEnabledKey = '__em-enabled__';\r\nconst markersKey = '__em-markers__';\r\nconst searchModeKey = '__em-search-mode__';\r\nconst tabCounterKey = '__em-tab-counter__';\r\nconst faviconMarkerKey = '__em-favicon-marker__';\r\nconst fontKey = '__em-font__';\r\n\r\n// Generic Error Handler\r\nfunction onError(error) {\r\n  console.log(error);\r\n}\r\n\r\nbrowser.storage.sync.get(extensionEnabledKey).then((extensionEnabledValue) => {\r\n  let extensionEnabled = extensionEnabledValue[extensionEnabledKey] === undefined ? true : extensionEnabledValue[extensionEnabledKey];\r\n  if (extensionEnabled) {\r\n    initialize();\r\n  }\r\n}, onError);\r\n\r\nbrowser.runtime.onMessage.addListener(\r\n  function (request, sender, sendResponse) {\r\n    if (request.cmd === \"toggleExtensionOnOff\") {\r\n      browser.storage.sync.set({ [extensionEnabledKey] :  request.data.value }).then(() => {\r\n        if (request.data.value) {\r\n          initialize();\r\n        } else {\r\n          removeListeners();\r\n        }\r\n      }, onError);\r\n    }\r\n  }\r\n);\r\n\r\nfunction updateCount(tabId, isOnRemoved) {\r\n  browser.storage.sync.get(tabCounterKey).then((storedTabCounter) => {\r\n    let storedTabCounterBool = storedTabCounter[tabCounterKey] || false;\r\n\r\n    if (storedTabCounterBool) {\r\n      browser.tabs.query({}).then((tabs) => {\r\n        let length = tabs.length;\r\n\r\n        // onRemoved fires too early and the count is one too many.\r\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1396758\r\n        if (isOnRemoved && tabId && tabs.map((t) => { return t.id; }).includes(tabId)) {\r\n            length--;\r\n        }\r\n\r\n        browser.action.setBadgeText({ text: length.toString() });\r\n\r\n        if (length > TAB_COUNT_COLOR_LIMIT) {\r\n            browser.action.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_HIGH });\r\n        } else {\r\n            browser.action.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_LOW });\r\n        }\r\n      });\r\n    } else {\r\n      browser.action.setBadgeText({ text: '' });\r\n    }\r\n  });\r\n}\r\n\r\nfunction clearCount() {\r\n  browser.action.setBadgeText({ text: '' });\r\n}\r\n\r\nfunction updateContent(tabId) {\r\n  if (tabId !== undefined) {\r\n    browser.tabs.get(tabId).then((tab) => {\r\n      if (tab.url !== '') {\r\n        browser.storage.sync.get([\r\n          fontKey,\r\n          searchModeKey,\r\n          markersKey,\r\n          faviconMarkerKey\r\n          ]).then((options) => {\r\n          let fontString = options[fontKey] || '';\r\n          let searchModeRegExp = options[searchModeKey] || false;\r\n          let faviconMarker = options[faviconMarkerKey] || false;\r\n\r\n          if (options[markersKey]) {\r\n            for (let storedObject of options[markersKey]) {\r\n\r\n              let urlFound = false;\r\n              if (searchModeRegExp) {\r\n                let regex = new RegExp(storedObject.settingUrl, 'iu');\r\n                urlFound = regex.test(tab.url);\r\n              } else {\r\n                urlFound = (tab.url.indexOf(storedObject.settingUrl) !== -1);\r\n              }\r\n\r\n              if (urlFound) {\r\n                browser.scripting.executeScript({\r\n                  target: {tabId: tabId},\r\n                  files: ['/js/content.min.js']\r\n                }).then(() => {\r\n                  browser.tabs.sendMessage(tabId, {\r\n                    command: 'addRibbon',\r\n                    url: storedObject.settingUrl,\r\n                    color: storedObject.settingColor,\r\n                    label: storedObject.settingLabel,\r\n                    fontSize: storedObject.settingFontSize,\r\n                    position: storedObject.settingPosition,\r\n                    size: storedObject.settingSize,\r\n                    font: fontString,\r\n                    enableFaviconMarker: faviconMarker\r\n                  }).then(response => {\r\n                    //console.log(\"Message from the content script:\");\r\n                    //console.log(response.response);\r\n                  }).catch(onError);\r\n                }, onError);\r\n\r\n                browser.tabs.insertCSS(tabId, {\r\n                  file: '/css/content.min.css'\r\n                }).then(null, onError);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }, onError);\r\n  }\r\n}\r\n\r\nlet onRemovedListener = function(tabId, removeInfo) {\r\n  updateCount(tabId, true);\r\n};\r\n\r\nlet onCreatedListener = function(tab) {\r\n  updateCount(tab.id, false);\r\n};\r\nlet onUpdatedListener = function(tabId, changeInfo, tab) {\r\n  // Only run update once after the page is finished loading\r\n  if (changeInfo.status === 'complete') {\r\n    updateContent(tabId);\r\n  }\r\n};\r\n\r\nfunction initialize() {\r\n  browser.tabs.onRemoved.addListener(onRemovedListener);\r\n  browser.tabs.onCreated.addListener(onCreatedListener);\r\n  browser.tabs.onUpdated.addListener(onUpdatedListener);\r\n  updateCount();\r\n}\r\n\r\nfunction removeListeners() {\r\n  browser.tabs.onRemoved.removeListener(onRemovedListener);\r\n  browser.tabs.onCreated.removeListener(onCreatedListener);\r\n  browser.tabs.onUpdated.removeListener(onUpdatedListener);\r\n  clearCount();\r\n}\r\n"]}