{"version":3,"sources":["background.js"],"names":["TAB_COUNT_COLOR_LIMIT","TAB_COUNT_COLOR_LOW","TAB_COUNT_COLOR_HIGH","markersKey","searchModeKey","tabCounterKey","faviconMarkerKey","fontKey","onError","error","console","log","updateCount","tabId","isOnRemoved","browser","storage","sync","get","then","storedTabCounter","tabs","query","length","map","t","id","includes","browserAction","setBadgeText","text","toString","setBadgeBackgroundColor","color","updateContent","undefined","tab","url","options","fontString","searchModeRegExp","faviconMarker","storedObject","urlFound","RegExp","settingUrl","test","indexOf","executeScript","file","sendMessage","command","settingColor","label","settingLabel","fontSize","settingFontSize","position","settingPosition","size","settingSize","font","enableFaviconMarker","response","catch","insertCSS","onRemoved","addListener","removeInfo","onCreated","onUpdated","changeInfo","status"],"mappings":"AAAA,MAAMA,sBAAwB,GACxBC,oBAAsB,UACtBC,qBAAsB,UACtBC,WAAa,iBACbC,cAAgB,qBAChBC,cAAgB,qBAChBC,iBAAmB,wBACnBC,QAAU,cAGhB,SAASC,QAAQC,GACfC,QAAQC,IAAIF,GAGd,SAASG,YAAYC,EAAOC,GAC1BC,QAAQC,QAAQC,KAAKC,IAAIb,eAAec,MAAMC,IACjBA,EAAiBf,iBAAkB,EAG5DU,QAAQM,KAAKC,MAAM,IAAIH,MAAME,IAC3B,IAAIE,EAASF,EAAKE,OAIdT,GAAeD,GAASQ,EAAKG,KAAKC,GAAeA,EAAEC,KAAOC,SAASd,IACnEU,IAGJR,QAAQa,cAAcC,aAAa,CAAEC,KAAMP,EAAOQ,aAE9CR,EA9BkB,GA+BlBR,QAAQa,cAAcI,wBAAwB,CAAEC,MA7BhC,YA+BhBlB,QAAQa,cAAcI,wBAAwB,CAAEC,MAhChC,eAoCtBlB,QAAQa,cAAcC,aAAa,CAAEC,KAAM,QAKjD,SAASI,cAAcrB,QACPsB,IAAVtB,GACFE,QAAQM,KAAKH,IAAIL,GAAOM,MAAMiB,IACZ,KAAZA,EAAIC,KACNtB,QAAQC,QAAQC,KAAKC,IAAI,CACvBX,QACAH,cACAD,WACAG,mBACEa,MAAMmB,IACR,IAAIC,EAAaD,EAAQ/B,UAAY,GACjCiC,EAAmBF,EAAQlC,iBAAkB,EAC7CqC,EAAgBH,EAAQhC,oBAAqB,EAEjD,GAAIgC,EAAQnC,YACV,IAAK,IAAIuC,KAAgBJ,EAAQnC,YAAa,CAE5C,IAAIwC,GAAW,EACf,GAAIH,EAAkB,CAEpBG,EADY,IAAIC,OAAOF,EAAaG,WAAY,MAC/BC,KAAKV,EAAIC,UAE1BM,GAA0D,IAA9CP,EAAIC,IAAIU,QAAQL,EAAaG,YAGvCF,IACF5B,QAAQM,KAAK2B,cAAcnC,EAAO,CAChCoC,KAAM,uBACL9B,MAAK,KACNJ,QAAQM,KAAK6B,YAAYrC,EAAO,CAC9BsC,QAAS,YACTd,IAAKK,EAAaG,WAClBZ,MAAOS,EAAaU,aACpBC,MAAOX,EAAaY,aACpBC,SAAUb,EAAac,gBACvBC,SAAUf,EAAagB,gBACvBC,KAAMjB,EAAakB,YACnBC,KAAMtB,EACNuB,oBAAqBrB,IACpBtB,MAAK4C,QAGLC,MAAMxD,WACRA,SAEHO,QAAQM,KAAK4C,UAAUpD,EAAO,CAC5BoC,KAAM,yBACL9B,KAAK,KAAMX,gBAMvBA,SAIPO,QAAQM,KAAK6C,UAAUC,aAAY,CAACtD,EAAOuD,KACzCxD,YAAYC,GAAO,MAGrBE,QAAQM,KAAKgD,UAAUF,aAAa/B,IAClCxB,YAAYwB,EAAIV,IAAI,MAGtBX,QAAQM,KAAKiD,UAAUH,aAAY,CAACtD,EAAO0D,EAAYnC,KAE3B,aAAtBmC,EAAWC,QACbtC,cAAcrB,MAIlBD","file":"background.min.js","sourcesContent":["const TAB_COUNT_COLOR_LIMIT = 10;\r\nconst TAB_COUNT_COLOR_LOW = '#28a745';\r\nconst TAB_COUNT_COLOR_HIGH ='#dc3545';\r\nconst markersKey = '__em-markers__';\r\nconst searchModeKey = '__em-search-mode__';\r\nconst tabCounterKey = '__em-tab-counter__';\r\nconst faviconMarkerKey = '__em-favicon-marker__';\r\nconst fontKey = '__em-font__';\r\n\r\n/* generic error handler */\r\nfunction onError(error) {\r\n  console.log(error);\r\n}\r\n\r\nfunction updateCount(tabId, isOnRemoved) {\r\n  browser.storage.sync.get(tabCounterKey).then((storedTabCounter) => {\r\n    let storedTabCounterBool = storedTabCounter[tabCounterKey] || false;\r\n\r\n    if (storedTabCounterBool) {\r\n      browser.tabs.query({}).then((tabs) => {\r\n        let length = tabs.length;\r\n\r\n        // onRemoved fires too early and the count is one too many.\r\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1396758\r\n        if (isOnRemoved && tabId && tabs.map((t) => { return t.id; }).includes(tabId)) {\r\n            length--;\r\n        }\r\n\r\n        browser.browserAction.setBadgeText({ text: length.toString() });\r\n\r\n        if (length > TAB_COUNT_COLOR_LIMIT) {\r\n            browser.browserAction.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_HIGH });\r\n        } else {\r\n            browser.browserAction.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_LOW });\r\n        }\r\n      });\r\n    } else {\r\n      browser.browserAction.setBadgeText({ text: '' });\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateContent(tabId) {\r\n  if (tabId !== undefined) {\r\n    browser.tabs.get(tabId).then((tab) => {\r\n      if (tab.url !== '') {\r\n        browser.storage.sync.get([\r\n          fontKey,\r\n          searchModeKey,\r\n          markersKey,\r\n          faviconMarkerKey\r\n         ]).then((options) => {\r\n          let fontString = options[fontKey] || '';\r\n          let searchModeRegExp = options[searchModeKey] || false;\r\n          let faviconMarker = options[faviconMarkerKey] || false;\r\n\r\n          if (options[markersKey]) {\r\n            for (let storedObject of options[markersKey]) {\r\n\r\n              let urlFound = false;\r\n              if (searchModeRegExp) {\r\n                let regex = new RegExp(storedObject.settingUrl, 'iu');\r\n                urlFound = regex.test(tab.url);\r\n              } else {\r\n                urlFound = (tab.url.indexOf(storedObject.settingUrl) !== -1);\r\n              }\r\n\r\n              if (urlFound) {\r\n                browser.tabs.executeScript(tabId, {\r\n                  file: '/js/content.min.js'\r\n                }).then(() => {\r\n                  browser.tabs.sendMessage(tabId, {\r\n                    command: 'addRibbon',\r\n                    url: storedObject.settingUrl,\r\n                    color: storedObject.settingColor,\r\n                    label: storedObject.settingLabel,\r\n                    fontSize: storedObject.settingFontSize,\r\n                    position: storedObject.settingPosition,\r\n                    size: storedObject.settingSize,\r\n                    font: fontString,\r\n                    enableFaviconMarker: faviconMarker\r\n                  }).then(response => {\r\n                    //console.log(\"Message from the content script:\");\r\n                    //console.log(response.response);\r\n                  }).catch(onError);\r\n                }, onError);\r\n\r\n                browser.tabs.insertCSS(tabId, {\r\n                  file: '/css/content.min.css'\r\n                }).then(null, onError);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }, onError);\r\n  }\r\n}\r\n\r\nbrowser.tabs.onRemoved.addListener((tabId, removeInfo) => {\r\n  updateCount(tabId, true);\r\n});\r\n\r\nbrowser.tabs.onCreated.addListener((tab) => {\r\n  updateCount(tab.id, false);\r\n});\r\n\r\nbrowser.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\r\n  // Only run update once after the page is finished loading\r\n  if (changeInfo.status === 'complete') {\r\n    updateContent(tabId);\r\n  }\r\n});\r\n\r\nupdateCount();\r\n"]}