{"version":3,"sources":["background.js"],"names":["TAB_COUNT_COLOR_LIMIT","TAB_COUNT_COLOR_LOW","TAB_COUNT_COLOR_HIGH","markersKey","onError","error","console","log","updateCount","tabId","isOnRemoved","browser","tabs","query","then","length","map","t","id","includes","browserAction","setBadgeText","text","toString","setBadgeBackgroundColor","color","updateContent","undefined","get","tab","url","storage","local","storedArray","storedObject","RegExp","settingUrl","test","executeScript","file","sendMessage","command","settingColor","label","settingLabel","position","settingPosition","size","settingSize","response","catch","insertCSS","onRemoved","addListener","onCreated","onUpdated"],"mappings":"AAAA,MAAMA,sBAAwB,GACxBC,oBAAsB,UACtBC,qBAAsB,UACtBC,WAAa,iBAGnB,SAASC,QAAQC,GACfC,QAAQC,IAAIF,GAGd,SAASG,YAAYC,EAAOC,GAC1BC,QAAQC,KAAKC,MAAM,IAAIC,KAAMF,IAC3B,IAAIG,EAASH,EAAKG,OAIdL,GAAeD,GAASG,EAAKI,IAAKC,GAAeA,EAAEC,IAAOC,SAASV,IACnEM,IAGJJ,QAAQS,cAAcC,aAAa,CAAEC,KAAMP,EAAOQ,aAE9CR,EAtBsB,GAuBtBJ,QAAQS,cAAcI,wBAAwB,CAAEC,MArB5B,YAuBpBd,QAAQS,cAAcI,wBAAwB,CAAEC,MAxB5B,cA6B5B,SAASC,cAAcjB,QACPkB,IAAVlB,GACFE,QAAQC,KAAKgB,IAAInB,GAAOK,KAAMe,IACZ,KAAZA,EAAIC,KACNnB,QAAQoB,QAAQC,MAAMJ,IAAIzB,YAAYW,KAAMmB,IAC1C,GAAIA,EAAY9B,YACd,IAAK,IAAI+B,KAAgBD,EAAY9B,YAAa,CAEpC,IAAIgC,OAAOD,EAAaE,WAAY,MAC3BC,KAAKR,EAAIC,OAG5BnB,QAAQC,KAAK0B,cAAc7B,EAAO,CAChC8B,KAAM,uBACLzB,KAAK,KACNH,QAAQC,KAAK4B,YAAY/B,EAAO,CAC9BgC,QAAS,YACTX,IAAKI,EAAaE,WAClBX,MAAOS,EAAaQ,aACpBC,MAAOT,EAAaU,aACpBC,SAAUX,EAAaY,gBACvBC,KAAMb,EAAac,cAClBlC,KAAKmC,OAGLC,MAAM9C,UACRA,SAEHO,QAAQC,KAAKuC,UAAU1C,EAAO,CAC5B8B,KAAM,yBACLzB,KAAK,KAAMV,YAInBA,UAEJA,SAIPO,QAAQC,KAAKwC,UAAUC,YAAa5C,IAClCD,YAAYC,GAAO,KAGrBE,QAAQC,KAAK0C,UAAUD,YAAa5C,IAClCD,YAAYC,GAAO,KAGrBE,QAAQC,KAAK2C,UAAUF,YAAa5C,IAClCiB,cAAcjB,KAGhBD,cACAkB","file":"background.min.js","sourcesContent":["const TAB_COUNT_COLOR_LIMIT = 10;\r\nconst TAB_COUNT_COLOR_LOW = '#28a745';\r\nconst TAB_COUNT_COLOR_HIGH ='#dc3545';\r\nconst markersKey = '__em-markers__';\r\n\r\n/* generic error handler */\r\nfunction onError(error) {\r\n  console.log(error);\r\n}\r\n\r\nfunction updateCount(tabId, isOnRemoved) {\r\n  browser.tabs.query({}).then((tabs) => {\r\n    let length = tabs.length;\r\n\r\n    // onRemoved fires too early and the count is one too many.\r\n    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1396758\r\n    if (isOnRemoved && tabId && tabs.map((t) => { return t.id; }).includes(tabId)) {\r\n        length--;\r\n    }\r\n\r\n    browser.browserAction.setBadgeText({ text: length.toString() });\r\n\r\n    if (length > TAB_COUNT_COLOR_LIMIT) {\r\n        browser.browserAction.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_HIGH });\r\n    } else {\r\n        browser.browserAction.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_LOW });\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateContent(tabId) {\r\n  if (tabId !== undefined) {\r\n    browser.tabs.get(tabId).then((tab) => {\r\n      if (tab.url !== '') {\r\n        browser.storage.local.get(markersKey).then((storedArray) => {\r\n          if (storedArray[markersKey]) {\r\n            for (let storedObject of storedArray[markersKey]) {\r\n\r\n              let regex = new RegExp(storedObject.settingUrl, 'iu'),\r\n                  urlFound = regex.test(tab.url);\r\n\r\n              if (urlFound) {\r\n                browser.tabs.executeScript(tabId, {\r\n                  file: '/js/content.min.js'\r\n                }).then(() => {\r\n                  browser.tabs.sendMessage(tabId, {\r\n                    command: 'addRibbon',\r\n                    url: storedObject.settingUrl,\r\n                    color: storedObject.settingColor,\r\n                    label: storedObject.settingLabel,\r\n                    position: storedObject.settingPosition,\r\n                    size: storedObject.settingSize\r\n                  }).then(response => {\r\n                    //console.log(\"Message from the content script:\");\r\n                    //console.log(response.response);\r\n                  }).catch(onError);\r\n                }, onError);\r\n\r\n                browser.tabs.insertCSS(tabId, {\r\n                  file: '/css/content.min.css'\r\n                }).then(null, onError);\r\n              }\r\n            }\r\n          }\r\n        }, onError);\r\n      }\r\n    }, onError);\r\n  }\r\n}\r\n\r\nbrowser.tabs.onRemoved.addListener((tabId) => {\r\n  updateCount(tabId, true);\r\n});\r\n\r\nbrowser.tabs.onCreated.addListener((tabId) => {\r\n  updateCount(tabId, false);\r\n});\r\n\r\nbrowser.tabs.onUpdated.addListener((tabId) => {\r\n  updateContent(tabId);\r\n});\r\n\r\nupdateCount();\r\nupdateContent();\r\n"]}