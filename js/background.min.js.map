{"version":3,"sources":["background.js"],"names":["TAB_COUNT_COLOR_LIMIT","TAB_COUNT_COLOR_LOW","TAB_COUNT_COLOR_HIGH","onError","error","console","log","updateCount","tabId","isOnRemoved","browser","tabs","query","then","length","map","t","id","includes","browserAction","setBadgeText","text","toString","setBadgeBackgroundColor","color","updateContent","undefined","get","tab","url","storage","local","results","settingsKeys","Object","keys","urlValue","indexOf","executeScript","file","sendMessage","command","label","position","size","response","catch","insertCSS","onRemoved","addListener","onCreated","onUpdated"],"mappings":"AAAA,MAAMA,sBAAwB,GACxBC,oBAAsB,UACtBC,qBAAsB,UAG5B,SAASC,QAAQC,GACfC,QAAQC,IAAIF,GAGd,SAASG,YAAYC,EAAOC,GAC1BC,QAAQC,KAAKC,MAAM,IAAIC,KAAMF,IAC3B,IAAIG,EAASH,EAAKG,OAIdL,GAAeD,GAASG,EAAKI,IAAKC,GAAeA,EAAEC,IAAOC,SAASV,IACnEM,IAGJJ,QAAQS,cAAcC,aAAa,CAAEC,KAAMP,EAAOQ,aAE9CR,EArBsB,GAsBtBJ,QAAQS,cAAcI,wBAAwB,CAAEC,MApB5B,YAsBpBd,QAAQS,cAAcI,wBAAwB,CAAEC,MAvB5B,cA4B5B,SAASC,cAAcjB,QACPkB,IAAVlB,GACFE,QAAQC,KAAKgB,IAAInB,GAAOK,KAAMe,IACZ,KAAZA,EAAIC,KACNnB,QAAQoB,QAAQC,MAAMJ,IAAI,MAAMd,KAAMmB,IACpC,IAAIC,EAAeC,OAAOC,KAAKH,GAC/B,IAAK,IAAII,KAAYH,GACgB,IAA/BL,EAAIC,IAAIQ,QAAQD,KAElB1B,QAAQC,KAAK2B,cAAc9B,EAAO,CAChC+B,KAAM,uBACL1B,KAAK,KAENH,QAAQC,KAAK6B,YAAYhC,EAAO,CAC9BiC,QAAS,YACTZ,IAAKO,EACLZ,MAAOQ,EAAQI,GAAU,GACzBM,MAAOV,EAAQI,GAAU,GACzBO,SAAUX,EAAQI,GAAU,GAC5BQ,KAAMZ,EAAQI,GAAU,KACvBvB,KAAKgC,OAGLC,MAAM3C,UACRA,SAEHO,QAAQC,KAAKoC,UAAUvC,EAAO,CAC5B+B,KAAM,yBACL1B,KAAK,KAAMV,WAIjBA,UAEJA,SAIPO,QAAQC,KAAKqC,UAAUC,YAAazC,IAClCD,YAAYC,GAAO,KAGrBE,QAAQC,KAAKuC,UAAUD,YAAazC,IAClCD,YAAYC,GAAO,KAGrBE,QAAQC,KAAKwC,UAAUF,YAAazC,IAClCiB,cAAcjB,KAGhBD,cACAkB","file":"background.min.js","sourcesContent":["const TAB_COUNT_COLOR_LIMIT = 10;\r\nconst TAB_COUNT_COLOR_LOW = '#28a745';\r\nconst TAB_COUNT_COLOR_HIGH ='#dc3545';\r\n\r\n/* generic error handler */\r\nfunction onError(error) {\r\n  console.log(error);\r\n}\r\n\r\nfunction updateCount(tabId, isOnRemoved) {\r\n  browser.tabs.query({}).then((tabs) => {\r\n    let length = tabs.length;\r\n\r\n    // onRemoved fires too early and the count is one too many.\r\n    // see https://bugzilla.mozilla.org/show_bug.cgi?id=1396758\r\n    if (isOnRemoved && tabId && tabs.map((t) => { return t.id; }).includes(tabId)) {\r\n        length--;\r\n    }\r\n\r\n    browser.browserAction.setBadgeText({ text: length.toString() });\r\n\r\n    if (length > TAB_COUNT_COLOR_LIMIT) {\r\n        browser.browserAction.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_HIGH });\r\n    } else {\r\n        browser.browserAction.setBadgeBackgroundColor({ 'color': TAB_COUNT_COLOR_LOW });\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateContent(tabId) {\r\n  if (tabId !== undefined) {\r\n    browser.tabs.get(tabId).then((tab) => {\r\n      if (tab.url !== '') {\r\n        browser.storage.local.get(null).then((results) => {\r\n          let settingsKeys = Object.keys(results);\r\n          for (let urlValue of settingsKeys) {\r\n            if (tab.url.indexOf(urlValue) !== -1) {\r\n\r\n              browser.tabs.executeScript(tabId, {\r\n                file: '/js/content.min.js'\r\n              }).then(() => {\r\n\r\n                browser.tabs.sendMessage(tabId, {\r\n                  command: 'addRibbon',\r\n                  url: urlValue,\r\n                  color: results[urlValue][0],\r\n                  label: results[urlValue][1],\r\n                  position: results[urlValue][2],\r\n                  size: results[urlValue][3]\r\n                }).then(response => {\r\n                  //console.log(\"Message from the content script:\");\r\n                  //console.log(response.response);\r\n                }).catch(onError);\r\n              }, onError);\r\n\r\n              browser.tabs.insertCSS(tabId, {\r\n                file: '/css/content.min.css'\r\n              }).then(null, onError);\r\n\r\n            }\r\n          }\r\n        }, onError);\r\n      }\r\n    }, onError);\r\n  }\r\n}\r\n\r\nbrowser.tabs.onRemoved.addListener((tabId) => {\r\n  updateCount(tabId, true);\r\n});\r\n\r\nbrowser.tabs.onCreated.addListener((tabId) => {\r\n  updateCount(tabId, false);\r\n});\r\n\r\nbrowser.tabs.onUpdated.addListener((tabId) => {\r\n  updateContent(tabId);\r\n});\r\n\r\nupdateCount();\r\nupdateContent();\r\n"]}